from collections import OrderedDict
from typing import Any, Optional

AutoNumber: Any
MultiValue: Any
NoAlias: Any
Unique: Any

class enum_property:
    fget: Any = ...
    __doc__: Any = ...
    name: Any = ...
    def __init__(self, fget: Optional[Any] = ..., doc: Optional[Any] = ..., name: Optional[Any] = ...) -> None: ...
    def __call__(self, func: Any, doc: Optional[Any] = ...) -> None: ...
    def __get__(self, instance: Any, ownerclass: Optional[Any] = ...): ...
    def __set__(self, instance: Any, value: Any): ...
    def __delete__(self, instance: Any) -> None: ...

class NonMember:
    value: Any = ...
    def __init__(self, value: Any) -> None: ...
    def __get__(self, instance: Any, ownerclass: Optional[Any] = ...): ...
skip = NonMember
nonmember = NonMember

class Member:
    value: Any = ...
    def __init__(self, value: Any) -> None: ...
member = Member

class constant:
    value: Any = ...
    __doc__: Any = ...
    def __init__(self, value: Any, doc: Optional[Any] = ...) -> None: ...
    def __get__(self, *args: Any): ...
    def __and__(self, other: Any): ...
    def __rand__(self, other: Any): ...
    def __invert__(self): ...
    def __or__(self, other: Any): ...
    def __ror__(self, other: Any): ...
    def __xor__(self, other: Any): ...
    def __rxor__(self, other: Any): ...
    def __abs__(self): ...
    def __add__(self, other: Any): ...
    def __radd__(self, other: Any): ...
    def __neg__(self): ...
    def __pos__(self): ...
    def __div__(self, other: Any): ...
    def __rdiv__(self, other: Any): ...
    def __floordiv__(self, other: Any): ...
    def __rfloordiv__(self, other: Any): ...
    def __truediv__(self, other: Any): ...
    def __rtruediv__(self, other: Any): ...
    def __lshift__(self, other: Any): ...
    def __rlshift__(self, other: Any): ...
    def __rshift__(self, other: Any): ...
    def __rrshift__(self, other: Any): ...
    def __mod__(self, other: Any): ...
    def __rmod__(self, other: Any): ...
    def __mul__(self, other: Any): ...
    def __rmul__(self, other: Any): ...
    def __pow__(self, other: Any): ...
    def __rpow__(self, other: Any): ...
    def __sub__(self, other: Any): ...
    def __rsub__(self, other: Any): ...

NamedConstant: Any

class _NamedConstantDict(dict):
    def __init__(self) -> None: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...

class NamedConstantMeta(type):
    def __new__(metacls: Any, cls: Any, bases: Any, clsdict: Any): ...
    def __delattr__(cls, attr: Any) -> None: ...
    def __setattr__(cls, name: Any, value: Any) -> None: ...
Constant = NamedConstant

class _NamedTupleDict(OrderedDict):
    def __init__(self, *args: Any, **kwds: Any) -> None: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...

class _TupleAttributeAtIndex:
    name: Any = ...
    index: Any = ...
    __doc__: Any = ...
    default: Any = ...
    def __init__(self, name: Any, index: Any, doc: Any, default: Any) -> None: ...
    def __get__(self, instance: Any, owner: Any): ...

class undefined:
    def __bool__(self): ...
    __nonzero__: Any = ...

class TupleSize(NamedConstant):
    fixed: Any = ...
    minimum: Any = ...
    variable: Any = ...

class NamedTupleMeta(type):
    def __init__(cls, *args: Any, **kwds: Any) -> None: ...
    def __new__(metacls: Any, cls: Any, bases: Any, clsdict: Any, size: Any = ...): ...
    def __add__(cls, other: Any): ...
    def __call__(cls, *args: Any, **kwds: Any): ...
    @property
    def __fields__(cls): ...
    @property
    def __aliases__(cls): ...

NamedTuple: Any

class EnumConstants(NamedConstant):
    AutoValue: Any = ...
    AutoNumber: Any = ...
    MultiValue: Any = ...
    NoAlias: Any = ...
    Unique: Any = ...

Enum: Any

class enum:
    name: Any = ...
    def __init__(self, *args: Any, **kwds: Any) -> None: ...
    @property
    def args(self): ...
    @property
    def kwds(self): ...
    def __hash__(self) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...

class auto(enum):
    def __and__(self, other: Any): ...
    def __rand__(self, other: Any): ...
    def __invert__(self): ...
    def __or__(self, other: Any): ...
    def __ror__(self, other: Any): ...
    def __xor__(self, other: Any): ...
    def __rxor__(self, other: Any): ...
    def __abs__(self): ...
    def __add__(self, other: Any): ...
    def __radd__(self, other: Any): ...
    def __neg__(self): ...
    def __pos__(self): ...
    def __div__(self, other: Any): ...
    def __rdiv__(self, other: Any): ...
    def __floordiv__(self, other: Any): ...
    def __rfloordiv__(self, other: Any): ...
    def __truediv__(self, other: Any): ...
    def __rtruediv__(self, other: Any): ...
    def __lshift__(self, other: Any): ...
    def __rlshift__(self, other: Any): ...
    def __rshift__(self, other: Any): ...
    def __rrshift__(self, other: Any): ...
    def __mod__(self, other: Any): ...
    def __rmod__(self, other: Any): ...
    def __mul__(self, other: Any): ...
    def __rmul__(self, other: Any): ...
    def __pow__(self, other: Any): ...
    def __rpow__(self, other: Any): ...
    def __sub__(self, other: Any): ...
    def __rsub__(self, other: Any): ...
    @property
    def value(self): ...
    @value.setter
    def value(self, value: Any) -> None: ...

class _EnumDict(dict):
    def __init__(self, cls_name: Any, settings: Any, start: Any, constructor_init: Any, constructor_start: Any) -> None: ...
    def __getitem__(self, key: Any): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...

no_arg: Any

class EnumMeta:
    def __init__(cls, *args: Any, **kwds: Any) -> None: ...
    def __new__(metacls: Any, cls: Any, bases: Any, clsdict: Any, init: Optional[Any] = ..., start: Optional[Any] = ..., settings: Any = ...): ...
    def __bool__(cls): ...
    def __call__(cls, value: Any = ..., names: Optional[Any] = ..., module: Optional[Any] = ..., type: Optional[Any] = ..., start: int = ...): ...
    def __contains__(cls, member: Any): ...
    def __delattr__(cls, attr: Any) -> None: ...
    def __dir__(self): ...
    @property
    def __members__(cls): ...
    def __getitem__(cls, name: Any): ...
    def __iter__(cls) -> Any: ...
    def __reversed__(cls): ...
    def __len__(cls): ...
    __nonzero__: Any = ...
    def __setattr__(cls, name: Any, value: Any) -> None: ...

class IntEnum(int, Enum): ...

class StrEnum(str, Enum):
    def __new__(cls, value: Any, *args: Any, **kwds: Any): ...

class LowerStrEnum(StrEnum):
    def __new__(cls, value: Any, *args: Any, **kwds: Any): ...

class UpperStrEnum(StrEnum):
    def __new__(cls, value: Any, *args: Any, **kwds: Any): ...

class AutoEnum(Enum): ...

class AutoNumberEnum(Enum):
    def __new__(cls, *args: Any, **kwds: Any): ...

class MultiValueEnum(Enum): ...
class NoAliasEnum(Enum): ...

class OrderedEnum(Enum):
    def __ge__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __lt__(self, other: Any) -> Any: ...

class SqliteEnum(Enum):
    def __conform__(self, protocol: Any): ...

class UniqueEnum(Enum): ...

def extend_enum(enumeration: Any, name: Any, *args: Any, **_private_kwds: Any): ...
def unique(enumeration: Any): ...

class Flag(Enum):
    def __contains__(self, other: Any): ...
    def __bool__(self): ...
    __nonzero__: Any = ...
    def __or__(self, other: Any): ...
    def __and__(self, other: Any): ...
    def __xor__(self, other: Any): ...
    def __invert__(self): ...
    def __iter__(self) -> Any: ...

class IntFlag(int, Flag):
    def __or__(self, other: Any): ...
    def __and__(self, other: Any): ...
    def __xor__(self, other: Any): ...
    __ror__: Any = ...
    __rand__: Any = ...
    __rxor__: Any = ...
    def __invert__(self): ...

class module:
    __name__: Any = ...
    def __init__(self, cls: Any, *args: Any) -> None: ...
    def register(self) -> None: ...
