from arpeggio import Optional, PTNodeVisitor, Parser
from typing import Any

text = str

class PEGVisitor(PTNodeVisitor):
    root_rule_name: Any = ...
    comment_rule_name: Any = ...
    ignore_case: Any = ...
    peg_rules: Any = ...
    def __init__(self, root_rule_name: Any, comment_rule_name: Any, ignore_case: Any, *args: Any, **kwargs: Any) -> None: ...
    resolved: Any = ...
    def visit_peggrammar(self, node: Any, children: Any): ...
    def visit_rule(self, node: Any, children: Any): ...
    def visit_sequence(self, node: Any, children: Any): ...
    def visit_ordered_choice(self, node: Any, children: Any): ...
    def visit_prefix(self, node: Any, children: Any): ...
    def visit_sufix(self, node: Any, children: Any): ...
    def visit_rule_crossref(self, node: Any, children: Any): ...
    def visit_regex(self, node: Any, children: Any): ...
    def visit_str_match(self, node: Any, children: Any): ...

class ParserPEG(Parser):
    root_rule_name: Any = ...
    comment_rule_name: Any = ...
    def __init__(self, language_def: Any, root_rule_name: Any, comment_rule_name: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...
